{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.token = sessionStorage.getItem('token');\n    this._url = 'https://localhost:7245/api/Activity/';\n  }\n  getAll() {\n    return this._httpClient.get(this._url + \"NextActivities\");\n  }\n  getAllInscrit() {\n    this.token = sessionStorage.getItem('token');\n    return this._httpClient.get(this._url + \"MyActivities\", {\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n  getEventbyId(id) {\n    return this._httpClient.get(this._url + id);\n  }\n  delete(id) {\n    this.token = sessionStorage.getItem('token');\n    return this._httpClient.delete(this._url + id, {\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n  update(id, event) {\n    this.token = sessionStorage.getItem('token');\n    return this._httpClient.put(this._url + id, event, {\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n  cancel(id) {\n    this.token = sessionStorage.getItem('token');\n    return this._httpClient.patch(this._url + id + \"/Cancel\", {}, {\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n  create(event) {\n    this.token = sessionStorage.getItem('token');\n    return this._httpClient.post('https://localhost:7245/api/Activity', event, {\n      headers: {\n        'Authorization': 'Bearer ' + this.token\n      }\n    });\n  }\n}\nEventService.ɵfac = function EventService_Factory(t) {\n  return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n};\nEventService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EventService,\n  factory: EventService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,YAAY;EAGvBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAF/B,UAAK,GAAmBC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/C,SAAI,GAAY,sCAAsC;EACd;EAGhDC,MAAM;IACJ,OAAO,IAAI,CAACH,WAAW,CAACI,GAAG,CAAW,IAAI,CAACC,IAAI,GAAC,gBAAgB,CAAC;EACnE;EAEAC,aAAa;IACX,IAAI,CAACC,KAAK,GAAEN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACF,WAAW,CAACI,GAAG,CAAW,IAAI,CAACC,IAAI,GAAC,cAAc,EAAE;MAAEG,OAAO,EAAG;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACD;MAAK;IAAG,CAAC,CAAE;EAC9H;EAEAE,YAAY,CAACC,EAAW;IACtB,OAAO,IAAI,CAACV,WAAW,CAACI,GAAG,CAAS,IAAI,CAACC,IAAI,GAACK,EAAE,CAAC;EACnD;EAEAC,MAAM,CAACD,EAAW;IAChB,IAAI,CAACH,KAAK,GAAEN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACF,WAAW,CAACW,MAAM,CAAS,IAAI,CAACN,IAAI,GAACK,EAAE,EAAG;MAAEF,OAAO,EAAG;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACD;MAAK;IAAG,CAAC,CAAC;EACnH;EAEAK,MAAM,CAACF,EAAW,EAAGG,KAAc;IACjC,IAAI,CAACN,KAAK,GAAEN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACF,WAAW,CAACc,GAAG,CAAS,IAAI,CAACT,IAAI,GAACK,EAAE,EAAGG,KAAK,EAAG;MAAEL,OAAO,EAAG;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACD;MAAK;IAAG,CAAC,CAAC;EACxH;EAEAQ,MAAM,CAACL,EAAW;IAChB,IAAI,CAACH,KAAK,GAAEN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACF,WAAW,CAACgB,KAAK,CAAS,IAAI,CAACX,IAAI,GAACK,EAAE,GAAC,SAAS,EAAE,EAAE,EAAE;MAAEF,OAAO,EAAG;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACD;MAAK;IAAG,CAAC,CAAC;EAC/H;EAGAU,MAAM,CAACJ,KAAc;IACnB,IAAI,CAACN,KAAK,GAAEN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACF,WAAW,CAACkB,IAAI,CAAS,qCAAqC,EAAEL,KAAK,EAAE;MAAEL,OAAO,EAAG;QAAE,eAAe,EAAG,SAAS,GAAG,IAAI,CAACD;MAAK;IAAG,CAAC,CAAC;EAChJ;;AAtCWT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFX;AAAM","names":["EventService","constructor","_httpClient","sessionStorage","getItem","getAll","get","_url","getAllInscrit","token","headers","getEventbyId","id","delete","update","event","put","cancel","patch","create","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Tom\\OneDrive\\Documents\\Visual Studio\\Angular\\arnaud\\Labo02\\src\\app\\shared\\services\\event.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Token } from '@angular/compiler';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IEvent } from 'src/app/models/IEvenet';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventService {\r\n  token : string | null = sessionStorage.getItem('token')\r\n  private _url : string = 'https://localhost:7245/api/Activity/';\r\n  constructor(private _httpClient : HttpClient) { }\r\n\r\n\r\n  getAll() : Observable<IEvent[]> {\r\n    return this._httpClient.get<IEvent[]>(this._url+\"NextActivities\");\r\n  }\r\n\r\n  getAllInscrit() : Observable<IEvent[]> {\r\n    this.token= sessionStorage.getItem('token')\r\n    return this._httpClient.get<IEvent[]>(this._url+\"MyActivities\", { headers : { 'Authorization' : 'Bearer ' + this.token  }} );\r\n  }\r\n\r\n  getEventbyId(id : number) : Observable<IEvent>{\r\n    return this._httpClient.get<IEvent>(this._url+id);\r\n  }\r\n\r\n  delete(id : number) : Observable<IEvent>{\r\n    this.token= sessionStorage.getItem('token')\r\n    return this._httpClient.delete<IEvent>(this._url+id , { headers : { 'Authorization' : 'Bearer ' + this.token  }});\r\n  }\r\n\r\n  update(id : number , event : IEvent) : Observable<IEvent>{\r\n    this.token= sessionStorage.getItem('token')\r\n    return this._httpClient.put<IEvent>(this._url+id , event  ,{ headers : { 'Authorization' : 'Bearer ' + this.token  }});\r\n  }\r\n\r\n  cancel(id : number ) : Observable<IEvent>{\r\n    this.token= sessionStorage.getItem('token')\r\n    return this._httpClient.patch<IEvent>(this._url+id+\"/Cancel\" ,{}, { headers : { 'Authorization' : 'Bearer ' + this.token  }});\r\n  }\r\n\r\n\r\n  create(event : IEvent ) : Observable<IEvent>{\r\n    this.token= sessionStorage.getItem('token')\r\n    return this._httpClient.post<IEvent>('https://localhost:7245/api/Activity' ,event, { headers : { 'Authorization' : 'Bearer ' + this.token  }});\r\n  }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}