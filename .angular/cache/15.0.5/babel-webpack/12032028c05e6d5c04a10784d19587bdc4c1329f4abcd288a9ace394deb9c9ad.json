{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(_httpClient, _route) {\n    this._httpClient = _httpClient;\n    this._route = _route;\n    this._url = 'https://localhost:7245/api/Auth/';\n    this._$connectedUser = new Subject();\n    this.$connectedUser = this._$connectedUser.asObservable();\n  }\n  register(register) {\n    this._httpClient.post(this._url + 'Register', register).subscribe({\n      next: res => {\n        //On emet le user qui vient de s'enregistrer via l'observable connectedUser\n        sessionStorage.setItem('create', \"true\");\n        //Mettre le token et le user en LocalStorage\n        this._route.navigateByUrl('/gestion/accueil');\n      }\n    });\n  }\n  login(loginForm) {\n    this._httpClient.post(this._url + 'Login', loginForm).subscribe({\n      next: res => {\n        //On emet le user qui vient de s'enregistrer via l'observable connectedUser\n        this._$connectedUser.next(res.member);\n        //Mettre le token et le user en LocalStorage\n        sessionStorage.setItem('token', res.token);\n        sessionStorage.setItem('userId', res.member.id);\n        this._route.navigateByUrl('/gestion/accueil');\n      }\n    });\n  }\n  logout() {\n    this._$connectedUser.next(undefined);\n    sessionStorage.removeItem('token');\n    sessionStorage.removeItem('userId');\n    this._route.navigateByUrl('/gestion/wait');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,OAAO,QAAQ,MAAM;;;;AAM1C,OAAM,MAAOC,WAAW;EAOtBC,YAAoBC,WAAwB,EAAWC,MAAe;IAAlD,gBAAW,GAAXD,WAAW;IAAwB,WAAM,GAANC,MAAM;IANrD,SAAI,GAAY,kCAAkC;IAElD,oBAAe,GAAoC,IAAIJ,OAAO,EAAyB;IAE/F,mBAAc,GAAuC,IAAI,CAACK,eAAe,CAACC,YAAY,EAAE;EAEd;EAE1EC,QAAQ,CAACA,QAAoB;IAC3B,IAAI,CAACJ,WAAW,CAACK,IAAI,CAAc,IAAI,CAACC,IAAI,GAAC,UAAU,EAAEF,QAAQ,CAAC,CAACG,SAAS,CAAC;MAC3EC,IAAI,EAAIC,GAAG,IAAI;QACb;QACAC,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAC,MAAM,CAAC;QACvC;QACA,IAAI,CAACV,MAAM,CAACW,aAAa,CAAC,kBAAkB,CAAC;MAC/C;KAED,CAAC;EAEJ;EAEAC,KAAK,CAACC,SAAkB;IAEtB,IAAI,CAACd,WAAW,CAACK,IAAI,CAAc,IAAI,CAACC,IAAI,GAAC,OAAO,EAAEQ,SAAS,CAAC,CAACP,SAAS,CAAC;MACzEC,IAAI,EAAIC,GAAG,IAAI;QAEb;QACA,IAAI,CAACP,eAAe,CAACM,IAAI,CAACC,GAAG,CAACM,MAAM,CAAC;QAErC;QACAL,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACO,KAAK,CAAC;QAC1CN,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAEF,GAAG,CAACM,MAAM,CAACE,EAAE,CAAC;QAC/C,IAAI,CAAChB,MAAM,CAACW,aAAa,CAAC,kBAAkB,CAAC;MAC/C;KACD,CAAC;EACJ;EAEAM,MAAM;IACJ,IAAI,CAAChB,eAAe,CAACM,IAAI,CAACW,SAAS,CAAC;IACpCT,cAAc,CAACU,UAAU,CAAC,OAAO,CAAC;IAClCV,cAAc,CAACU,UAAU,CAAC,QAAQ,CAAC;IACnC,IAAI,CAACnB,MAAM,CAACW,aAAa,CAAC,eAAe,CAAC;EAC5C;;AA3CWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["Subject","AuthService","constructor","_httpClient","_route","_$connectedUser","asObservable","register","post","_url","subscribe","next","res","sessionStorage","setItem","navigateByUrl","login","loginForm","member","token","id","logout","undefined","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Arnaud\\Desktop\\Angular\\projetTom\\Labo02\\src\\app\\shared\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { IAuthResult, IAuthUser } from 'src/app/models/IAuthResult';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ILogin, IRegister } from 'src/app/models/IAuth';\r\nimport { Router } from '@angular/router';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private _url : string = 'https://localhost:7245/api/Auth/';\r\n\r\n  private _$connectedUser : Subject<IAuthUser | undefined> = new Subject<IAuthUser | undefined>();\r\n\r\n  $connectedUser : Observable<IAuthUser | undefined> = this._$connectedUser.asObservable();\r\n\r\n  constructor(private _httpClient : HttpClient , private _route : Router) { }\r\n\r\n  register(register : IRegister) : void {\r\n    this._httpClient.post<IAuthResult>(this._url+'Register', register).subscribe({\r\n      next : (res) => {\r\n        //On emet le user qui vient de s'enregistrer via l'observable connectedUser\r\n        sessionStorage.setItem('create',\"true\");\r\n        //Mettre le token et le user en LocalStorage\r\n        this._route.navigateByUrl('/gestion/accueil');\r\n      }\r\n\r\n    })\r\n\r\n  }\r\n\r\n  login(loginForm : ILogin) : void {\r\n\r\n    this._httpClient.post<IAuthResult>(this._url+'Login', loginForm).subscribe({\r\n      next : (res) => {\r\n\r\n        //On emet le user qui vient de s'enregistrer via l'observable connectedUser\r\n        this._$connectedUser.next(res.member);\r\n\r\n        //Mettre le token et le user en LocalStorage\r\n        sessionStorage.setItem('token', res.token);\r\n        sessionStorage.setItem('userId', res.member.id);\r\n        this._route.navigateByUrl('/gestion/accueil');\r\n      }\r\n    })\r\n  }\r\n\r\n  logout() : void {\r\n    this._$connectedUser.next(undefined);\r\n    sessionStorage.removeItem('token');\r\n    sessionStorage.removeItem('userId');\r\n    this._route.navigateByUrl('/gestion/wait');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}